1.naive
class Solution {
    public int searchInsert(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] >= target) return i;
        }
        return nums.length;
    }
}
TC: O(n), SC: O(1)

2.optimal
class Solution {
    public int searchInsert(int[] A, int target) 
    {
        int low = 0, high = A.length-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(A[mid] == target) return mid;
            else if(A[mid] > target) high = mid-1;
            else low = mid+1;
        }
        return low;

    }
}
The Better one is already Optimal (O(log n)), no further improvement possible.
Uses binary search â†’ best fit for sorted arrays.
