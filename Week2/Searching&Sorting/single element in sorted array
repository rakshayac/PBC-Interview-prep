540. Single Element in a Sorted Array

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.
Example 1:

Inut: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
1.naive
class Solution {
    public int singleNonDuplicate(int[] nums) {
        for(int i=1;i<nums.length;i+=2){
         if(nums[i]!=nums[i-1]){
             return nums[i-1];
         }   
        }
		//if didn't find means last element is single, here's the example [1,1,2,2,3]
        return nums[nums.length-1];
    }
}

2.better
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length; //size of the array.
        int ans = 0;
        // XOR all the elements:
        for (int i = 0; i < n; i++) {
            ans = ans ^ nums[i];
        }
        return ans;
    }
}
2. Better Approach
Use XOR property: a ^ a = 0 and a ^ 0 = a.

XOR all elements â†’ the duplicate pairs cancel out, leaving the single element.

Time Complexity: O(n)
Space Complexity: O(1)

ðŸ‘‰ Example: 1^1^2^3^3^4^4^8^8 = 2 âœ…

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length; 
        int ans = 0;
        // XOR all the elements
        for (int i = 0; i < n; i++) {
            ans = ans ^ nums[i];
        }
        return ans;
    }
}


3.optimal

Edge Cases
Array of size 1: [5] â†’ output 5
Single element at beginning: [2,3,3,4,4,5,5] â†’ output 2
Single element at end: [1,1,2,2,3,3,4] â†’ output 4

Dry Run Example
Input: nums = [1,1,2,3,3,4,4,8,8]

low=0, high=8 â†’ mid=4 â†’ mid=4 (even) â†’ nums[4]=3, nums[5]=4 â†’ not equal â†’ single is left â†’ high=4

low=0, high=4 â†’ mid=2 â†’ nums[2]=2, nums[3]=3 â†’ not equal â†’ single is left â†’ high=2

low=0, high=2 â†’ mid=1 (odd â†’ make even=0) â†’ nums[0]=1, nums[1]=1 â†’ equal â†’ low=2

low=2, high=2 â†’ stop â†’ answer=nums[2]= 2 âœ…

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0, high = nums.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            // Ensure mid is even
            if (mid % 2 == 1) mid--;

            // If pair is intact, single element is on right
            if (nums[mid] == nums[mid + 1]) {
                low = mid + 2;
            } else {
                // Single element is on left (including mid)
                high = mid;
            }
        }

        return nums[low];
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        int[] nums1 = {1,1,2,3,3,4,4,8,8};
        int[] nums2 = {3,3,7,7,10,11,11};

        System.out.println("Single element in [1,1,2,3,3,4,4,8,8] = " + sol.singleNonDuplicate(nums1)); // 2
        System.out.println("Single element in [3,3,7,7,10,11,11] = " + sol.singleNonDuplicate(nums2)); // 10
    }
}

